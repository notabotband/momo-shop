---
variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  SAST_EXCLUDED_ANALYZERS: "spotbugs,gosec"

include:
  - project: templates/ci
    file: DockerInDockerTemplate.yml
  - template: Security/SAST.gitlab-ci.yml

stages:
  - build
  - test
  - release
  - deploy

build:
  stage: build
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd backend
    - >
      docker build --build-arg VERSION=$VERSION --tag
      $CI_REGISTRY_IMAGE/momo-backend:$CI_COMMIT_SHA .
    - docker push $CI_REGISTRY_IMAGE/momo-backend:$CI_COMMIT_SHA

test:
  stage: test
  image: golang:1.20
  script:
    - cd backend
    - go fmt $(go list ./... | grep -v /vendor/)
    - go vet $(go list ./... | grep -v /vendor/)
    - go test -race $(go list ./... | grep -v /vendor/)
    - go test -v ./...
  needs:
    - build

sonarqube-sast:
  stage: test
  image: sonarsource/sonar-scanner-cli:latest
  script:
    - cd backend
    - >
      sonar-scanner -Dsonar.projectKey=${SONAR_BACKEND_PROJECT_KEY}
      -Dsonar.projectName=${SONAR_BACKEND_PROJECT_NAME}
      -Dsonar.host.url=${SONAR_HOST_URL} -Dsonar.sources=.
      -Dsonar.login=${SONAR_LOGIN_BACKEND}
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  needs:
    - build

upload:
  stage: release
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/momo-backend:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE/momo-backend:$CI_COMMIT_SHA
      $CI_REGISTRY_IMAGE/momo-backend:latest
    - docker push $CI_REGISTRY_IMAGE/momo-backend:latest
  needs:
    - test

deploy:
  stage: deploy
  image: vault:1.11.3
  before_script:
    - apk add openssh-client bash
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh ${DEV_USER}@${SHOP_URL}
      "export "VERSION=${VERSION}";
      export "REGISTRY_ACCESS_TOKEN=${REGISTRY_ACCESS_TOKEN}";
      export "REGISTRY_USER=${REGISTRY_USER}";
      export "CI_REGISTRY_USER=${CI_REGISTRY_USER}";
      export "CI_REGISTRY_IMAGE=${CI_REGISTRY_IMAGE}";
      export "CI_REGISTRY_PASSWORD=${CI_REGISTRY_PASSWORD}";
      export "CI_REGISTRY=${CI_REGISTRY}";
      /bin/bash -s " < ./deploy-backend.sh
  environment:
    name: staging
    url: https://${SHOP_URL}
  when: manual
